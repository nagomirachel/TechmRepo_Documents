<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.jboss.quickstarts.jdg</groupId>
    <artifactId>jboss-carmart-tx</artifactId>
    <version>6.4.0.Final-redhat-4</version>
    <packaging>war</packaging>
    <name>JBoss JDG Quickstart: carmart-tx</name>
    <description>Transactional CarMart</description>

    <licenses>
        <license>
            <name>Apache License, Version 2.0</name>
            <distribution>repo</distribution>
            <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
        </license>
    </licenses>
    <properties>
        <!-- Explicitly declaring the source encoding eliminates the following 
            message: -->
        <!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered 
            resources, i.e. build is platform dependent! -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- JBoss dependency versions -->
        <com.ocpsoft.prettyfaces.version>3.3.2</com.ocpsoft.prettyfaces.version>
        <version.jboss.weld>1.1.8.Final</version.jboss.weld>
        <version.com.sun.faces.jsf.impl>2.0.2</version.com.sun.faces.jsf.impl>

        <version.org.infinispan>6.2.0.Final-redhat-4</version.org.infinispan>

        <version.jboss.spec.javaee.6.0>3.0.2.Final-redhat-4</version.jboss.spec.javaee.6.0>

        <version.org.jboss.jbossts.jta.narayana-jta>4.17.15.Final-redhat-4</version.org.jboss.jbossts.jta.narayana-jta>

         <!-- other plugin versions -->
        <version.jboss.maven.plugin>7.4.Final</version.jboss.maven.plugin>
        <version.buildhelper.maven.plugin>1.7</version.buildhelper.maven.plugin>

        <!-- other plugin versions -->
        <version.war.plugin>2.2</version.war.plugin>
        <version.maven.surefire>2.14</version.maven.surefire>

        <!-- maven-compiler-plugin -->
        <maven.compiler.target>1.6</maven.compiler.target>
        <maven.compiler.source>1.6</maven.compiler.source>

        <!-- test dependencies versions -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <jboss.as7.version>7.2.0.Final</jboss.as7.version>
        <browser>phantomjs</browser>

    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.infinispan</groupId>
                <artifactId>infinispan-bom</artifactId>
                <version>${version.org.infinispan}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- Define the version of JBoss' Java EE 6 APIs we want to import.
                Any dependencies from org.jboss.spec will have their version defined by this
                BOM -->
            <!-- JBoss distributes a complete set of Java EE 6 APIs including
                a Bill of Materials (BOM). A BOM specifies the versions of a "stack" (or
                a collection) of artifacts. We use this here so that we always get the correct
                versions of artifacts. Here we use the jboss-javaee-6.0 stack (you can
                read this as the JBoss stack of the Java EE 6 APIs). You can actually
                use this stack with any version of JBoss AS that implements Java EE 6, not
                just JBoss AS 7! -->
            <dependency>
                <groupId>org.jboss.spec</groupId>
                <artifactId>jboss-javaee-6.0</artifactId>
                 <version>3.0.2.Final-redhat-14</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>org.jboss.jbossts.jta</groupId>
                <artifactId>narayana-jta</artifactId>
                <version>${version.org.jboss.jbossts.jta.narayana-jta}</version>
                <scope>provided</scope>
                <exclusions>
                    <exclusion>
                        <groupId>jfree</groupId>
                        <artifactId>jfreechart</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>jfree</groupId>
                        <artifactId>jcommon</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>org.jboss.byteman</groupId>
                        <artifactId>byteman</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>org.jboss.byteman</groupId>
                        <artifactId>byteman-submit</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>org.hornetq</groupId>
                        <artifactId>hornetq-journal</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>org.hornetq</groupId>
                        <artifactId>hornetq-commons</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>io.netty</groupId>
                        <artifactId>netty</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>org.jboss.logmanager</groupId>
                        <artifactId>jboss-logmanager</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>

            <!-- Import Prettyfaces dependency. This is a UNSUPPORTED component -->
            <dependency>
                <groupId>com.ocpsoft</groupId>
                <artifactId>prettyfaces-jsf2</artifactId>
                <version>${com.ocpsoft.prettyfaces.version}</version>
                <scope>compile</scope>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <dependencies>

        <!-- First declare the APIs we depend on and need for compilation. 
            The dependencies with provided scope are provided by JBoss AS 7, The other 
            compiled scoped dependencies will be add to the application libraries -->

        <!-- Import the JSF API, we use provided scope as the API is included 
            in JBoss AS 7 -->
        <dependency>
            <groupId>org.jboss.spec.javax.faces</groupId>
            <artifactId>jboss-jsf-api_2.1_spec</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Import the CDI API, we use provided scope as the API is included 
            in JBoss AS 7 -->
        <dependency>
            <groupId>javax.enterprise</groupId>
            <artifactId>cdi-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Import the infinispan core -->
        <dependency>
            <groupId>org.infinispan</groupId>
            <artifactId>infinispan-core</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- Import Prettyfaces dependency. This is a UNSUPPORTED component -->
        <dependency>
            <groupId>com.ocpsoft</groupId>
            <artifactId>prettyfaces-jsf2</artifactId>
            <scope>compile</scope>
        </dependency>
    </dependencies>

    <build>
        <!-- Maven will append the version to the finalName (which is the 
            name given to the generated war, and hence the context root) -->
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>${version.war.plugin}</version>
                <configuration>
                    <!-- Java EE 6 doesn't require web.xml, Maven needs to 
                        catch up! -->
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <!-- This is the default profile (active by default) that uses the 
            src/local/java folder which provided local access to the cache (library mode) -->
        <profile>
            <id>library-jbossas</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <!-- This plugin will add the src/local/java source folder -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <version>${version.buildhelper.maven.plugin}</version>
                        <executions>
                            <execution>
                                <id>add-source</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>add-source</goal>
                                </goals>
                                <configuration>
                                    <sources>
                                        <source>src/jbossas/java</source>
                                    </sources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <!-- The JBoss AS plugin deploys your war to a local 
                            JBoss AS container -->
                        <!-- To use, run: mvn package jboss-as:deploy -->
                        <groupId>org.jboss.as.plugins</groupId>
                        <artifactId>jboss-as-maven-plugin</artifactId>
                        <version>${version.jboss.maven.plugin}</version>
                    </plugin>
                    <!-- Maven Surefire Plugin to skip tests on build -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>${version.maven.surefire}</version>
                        <configuration>
                            <skipTests>true</skipTests>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>

