<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
   
    <groupId>org.jboss.quickstarts.jdg</groupId>
    <artifactId>jboss-helloworld-jdg</artifactId>
    <version>6.4.0.Final-redhat-4</version>
    <packaging>war</packaging>
    <name>JBoss JDG Quickstart: helloworld-jdg</name> 

    <licenses>
        <license>
            <name>Apache License, Version 2.0</name>
            <distribution>repo</distribution>
            <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
        </license>
    </licenses>

    <properties>
        <!-- Explicitly declaring the source encoding eliminates the following
        message: -->
        <!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered
        resources, i.e. build is platform dependent! -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- JBoss dependency versions -->
        <version.jboss.maven.plugin>7.4.Final</version.jboss.maven.plugin>

        <version.org.infinispan>6.2.0.Final-redhat-4</version.org.infinispan>

        <version.jboss.spec.javaee.6.0>3.0.2.Final-redhat-4</version.jboss.spec.javaee.6.0>

        <!-- other plugin versions -->
        <version.buildhelper.maven.plugin>1.7</version.buildhelper.maven.plugin>
        <war.plugin.version>2.2</war.plugin.version>
        <version.maven.surefire>2.14</version.maven.surefire>

        <!-- maven-compiler-plugin -->
        <maven.compiler.target>1.6</maven.compiler.target>
        <maven.compiler.source>1.6</maven.compiler.source>

        <!-- test dependencies versions -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <jboss.as7.version>7.2.0.Final</jboss.as7.version>
        <browser>phantomjs</browser>
        <test.server.config>D:/Jboss set up/jboss-eap-6.1/standalone/configurationstandalone.xml</test.server.config>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.infinispan</groupId>
                <artifactId>infinispan-bom</artifactId>
                <version>${version.org.infinispan}</version>
                <type>pom</type>
             <scope>import</scope>
            <!-- <scope>compile</scope> -->
            </dependency>

            <!-- Define the version of JBoss' Java EE 6 APIs we want to import.
                Any dependencies from org.jboss.spec will have their version defined by this
                BOM -->
            <!-- JBoss distributes a complete set of Java EE 6 APIs including
                a Bill of Materials (BOM). A BOM specifies the versions of a "stack" (or
                a collection) of artifacts. We use this here so that we always get the correct
                versions of artifacts. Here we use the jboss-javaee-6.0 stack (you can
                read this as the JBoss stack of the Java EE 6 APIs). You can actually
                use this stack with any version of JBoss AS that implements Java EE 6, not
                just JBoss AS 7! -->
            <dependency>
                <groupId>org.jboss.spec</groupId>
                <artifactId>jboss-javaee-6.0</artifactId>
               <version>3.0.2.Final-redhat-14</version>
                <type>pom</type>
               <scope>import</scope> 
               <!-- <scope>compile</scope> -->
            </dependency>
	<dependency>
  		<groupId>org.infinispan</groupId>
  		<artifactId>infinispan-cachestore-jdbc</artifactId>
  		<version>7.0.3.Final</version>
  		<scope>import</scope>
	</dependency>

        </dependencies>
    </dependencyManagement>

    <dependencies>

        <dependency>
            <groupId>org.infinispan</groupId>
            <artifactId>infinispan-core</artifactId>
            <scope>compile</scope>
            <version>${version.org.infinispan}</version>
        </dependency>

        <!-- Import the Servlet API, we use provided scope as the API is included
             in JBoss AS 7 -->
        <dependency>
            <groupId>org.jboss.spec.javax.servlet</groupId>
            <artifactId>jboss-servlet-api_3.0_spec</artifactId>
            <scope>provided</scope>
            <version>1.0.2.Final-redhat-1</version>
        </dependency>

        <!-- Import the CDI API, we use provided scope as the API is included
            in JBoss AS 7 -->
        <dependency>
            <groupId>javax.enterprise</groupId>
            <artifactId>cdi-api</artifactId>
            <scope>provided</scope>
            <version>1.0-SP4-redhat-4</version>
        </dependency>

        <!-- Import the JSF API, we use provided scope as the API is included
        in JBoss AS 7 -->
        <dependency>
            <groupId>org.jboss.spec.javax.faces</groupId>
            <artifactId>jboss-jsf-api_2.1_spec</artifactId>
            <scope>provided</scope>
             <version>2.1.28.Final-redhat-1</version>
        </dependency>
    </dependencies>

    <build>
        <!-- Set the name of the war, used as the context root when the app
        is deployed -->
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>${war.plugin.version}</version>
                <configuration>
                    <!-- Java EE 6 doesn't require web.xml, Maven needs to
                    catch up! -->
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>

            <!-- Maven Surefire Plugin to skip tests on build -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${version.maven.surefire}</version>
                <configuration>
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>

            <plugin>
                <!-- The JBoss AS plugin deploys your war to a local
                JBoss AS container -->
                <!-- To use, run: mvn package jboss-as:deploy -->
                <groupId>org.jboss.as.plugins</groupId>
                <artifactId>jboss-as-maven-plugin</artifactId>
                <version>${version.jboss.maven.plugin}</version>
            </plugin>
        </plugins>
    </build>
</project>

